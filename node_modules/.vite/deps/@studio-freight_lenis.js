import {
  __publicField
} from "./chunk-IVLCYF2H.js";

// node_modules/@studio-freight/lenis/dist/lenis.mjs
function t(t2, e, i) {
  return Math.max(t2, Math.min(e, i));
}
var Animate = class {
  advance(e) {
    var _a;
    if (!this.isRunning)
      return;
    let i = false;
    if (this.lerp)
      this.value = (s = this.value, o = this.to, n = 60 * this.lerp, r = e, function(t2, e2, i2) {
        return (1 - i2) * t2 + i2 * e2;
      }(s, o, 1 - Math.exp(-n * r))), Math.round(this.value) === this.to && (this.value = this.to, i = true);
    else {
      this.currentTime += e;
      const s2 = t(0, this.currentTime / this.duration, 1);
      i = s2 >= 1;
      const o2 = i ? 1 : this.easing(s2);
      this.value = this.from + (this.to - this.from) * o2;
    }
    var s, o, n, r;
    (_a = this.onUpdate) == null ? void 0 : _a.call(this, this.value, i), i && this.stop();
  }
  stop() {
    this.isRunning = false;
  }
  fromTo(t2, e, { lerp: i = 0.1, duration: s = 1, easing: o = (t3) => t3, onStart: n, onUpdate: r }) {
    this.from = this.value = t2, this.to = e, this.lerp = i, this.duration = s, this.easing = o, this.currentTime = 0, this.isRunning = true, n == null ? void 0 : n(), this.onUpdate = r;
  }
};
var Dimensions = class {
  constructor({ wrapper: t2, content: e, autoResize: i = true } = {}) {
    __publicField(this, "resize", () => {
      this.onWrapperResize(), this.onContentResize();
    });
    __publicField(this, "onWrapperResize", () => {
      this.wrapper === window ? (this.width = window.innerWidth, this.height = window.innerHeight) : (this.width = this.wrapper.clientWidth, this.height = this.wrapper.clientHeight);
    });
    __publicField(this, "onContentResize", () => {
      this.scrollHeight = this.content.scrollHeight, this.scrollWidth = this.content.scrollWidth;
    });
    if (this.wrapper = t2, this.content = e, i) {
      const t3 = function(t4, e2) {
        let i2;
        return function() {
          let s = arguments, o = this;
          clearTimeout(i2), i2 = setTimeout(function() {
            t4.apply(o, s);
          }, e2);
        };
      }(this.resize, 250);
      this.wrapper !== window && (this.wrapperResizeObserver = new ResizeObserver(t3), this.wrapperResizeObserver.observe(this.wrapper)), this.contentResizeObserver = new ResizeObserver(t3), this.contentResizeObserver.observe(this.content);
    }
    this.resize();
  }
  destroy() {
    var _a, _b;
    (_a = this.wrapperResizeObserver) == null ? void 0 : _a.disconnect(), (_b = this.contentResizeObserver) == null ? void 0 : _b.disconnect();
  }
  get limit() {
    return { x: this.scrollWidth - this.width, y: this.scrollHeight - this.height };
  }
};
var Emitter = class {
  constructor() {
    this.events = {};
  }
  emit(t2, ...e) {
    let i = this.events[t2] || [];
    for (let t3 = 0, s = i.length; t3 < s; t3++)
      i[t3](...e);
  }
  on(t2, e) {
    var _a;
    return ((_a = this.events[t2]) == null ? void 0 : _a.push(e)) || (this.events[t2] = [e]), () => {
      var _a2;
      this.events[t2] = (_a2 = this.events[t2]) == null ? void 0 : _a2.filter((t3) => e !== t3);
    };
  }
  off(t2, e) {
    var _a;
    this.events[t2] = (_a = this.events[t2]) == null ? void 0 : _a.filter((t3) => e !== t3);
  }
  destroy() {
    this.events = {};
  }
};
var VirtualScroll = class {
  constructor(t2, { wheelMultiplier: e = 1, touchMultiplier: i = 2, normalizeWheel: s = false }) {
    __publicField(this, "onTouchStart", (t2) => {
      const { clientX: e, clientY: i } = t2.targetTouches ? t2.targetTouches[0] : t2;
      this.touchStart.x = e, this.touchStart.y = i, this.lastDelta = { x: 0, y: 0 }, this.emitter.emit("scroll", { deltaX: 0, deltaY: 0, event: t2 });
    });
    __publicField(this, "onTouchMove", (t2) => {
      const { clientX: e, clientY: i } = t2.targetTouches ? t2.targetTouches[0] : t2, s = -(e - this.touchStart.x) * this.touchMultiplier, o = -(i - this.touchStart.y) * this.touchMultiplier;
      this.touchStart.x = e, this.touchStart.y = i, this.lastDelta = { x: s, y: o }, this.emitter.emit("scroll", { deltaX: s, deltaY: o, event: t2 });
    });
    __publicField(this, "onTouchEnd", (t2) => {
      this.emitter.emit("scroll", { deltaX: this.lastDelta.x, deltaY: this.lastDelta.y, event: t2 });
    });
    __publicField(this, "onWheel", (e) => {
      let { deltaX: i, deltaY: s } = e;
      this.normalizeWheel && (i = t(-100, i, 100), s = t(-100, s, 100)), i *= this.wheelMultiplier, s *= this.wheelMultiplier, this.emitter.emit("scroll", { deltaX: i, deltaY: s, event: e });
    });
    this.element = t2, this.wheelMultiplier = e, this.touchMultiplier = i, this.normalizeWheel = s, this.touchStart = { x: null, y: null }, this.emitter = new Emitter(), this.element.addEventListener("wheel", this.onWheel, { passive: false }), this.element.addEventListener("touchstart", this.onTouchStart, { passive: false }), this.element.addEventListener("touchmove", this.onTouchMove, { passive: false }), this.element.addEventListener("touchend", this.onTouchEnd, { passive: false });
  }
  on(t2, e) {
    return this.emitter.on(t2, e);
  }
  destroy() {
    this.emitter.destroy(), this.element.removeEventListener("wheel", this.onWheel, { passive: false }), this.element.removeEventListener("touchstart", this.onTouchStart, { passive: false }), this.element.removeEventListener("touchmove", this.onTouchMove, { passive: false }), this.element.removeEventListener("touchend", this.onTouchEnd, { passive: false });
  }
};
var Lenis = class {
  constructor({ wrapper: t2 = window, content: e = document.documentElement, wheelEventsTarget: i = t2, eventsTarget: s = i, smoothWheel: o = true, smoothTouch: n = false, syncTouch: r = false, syncTouchLerp: l = 0.075, touchInertiaMultiplier: h = 35, duration: a, easing: c = (t3) => Math.min(1, 1.001 - Math.pow(2, -10 * t3)), lerp: p = !a && 0.1, infinite: u = false, orientation: d = "vertical", gestureOrientation: m = "vertical", touchMultiplier: g = 1, wheelMultiplier: v = 1, normalizeWheel: S = false, autoResize: w = true } = {}) {
    __publicField(this, "onVirtualScroll", ({ deltaX: t2, deltaY: e, event: i }) => {
      if (i.ctrlKey)
        return;
      const s = i.type.includes("touch"), o = i.type.includes("wheel");
      if ((this.options.smoothTouch || this.options.syncTouch) && s && "touchstart" === i.type)
        return void this.reset();
      const n = 0 === t2 && 0 === e, r = "vertical" === this.options.gestureOrientation && 0 === e || "horizontal" === this.options.gestureOrientation && 0 === t2;
      if (n || r)
        return;
      let l = i.composedPath();
      if (l = l.slice(0, l.indexOf(this.rootElement)), l.find((t3) => {
        var _a, _b, _c, _d;
        return ((_a = t3.hasAttribute) == null ? void 0 : _a.call(t3, "data-lenis-prevent")) || s && ((_b = t3.hasAttribute) == null ? void 0 : _b.call(t3, "data-lenis-prevent-touch")) || o && ((_c = t3.hasAttribute) == null ? void 0 : _c.call(t3, "data-lenis-prevent-wheel")) || ((_d = t3.classList) == null ? void 0 : _d.contains("lenis"));
      }))
        return;
      if (this.isStopped || this.isLocked)
        return void i.preventDefault();
      if (this.isSmooth = (this.options.smoothTouch || this.options.syncTouch) && s || this.options.smoothWheel && o, !this.isSmooth)
        return this.isScrolling = false, void this.animate.stop();
      i.preventDefault();
      let h = e;
      "both" === this.options.gestureOrientation ? h = Math.abs(e) > Math.abs(t2) ? e : t2 : "horizontal" === this.options.gestureOrientation && (h = t2);
      const a = s && this.options.syncTouch, c = s && "touchend" === i.type && Math.abs(h) > 5;
      c && (h = this.velocity * this.options.touchInertiaMultiplier), this.scrollTo(this.targetScroll + h, { programmatic: false, ...a ? { lerp: c ? this.options.syncTouchLerp : 1 } : { lerp: this.options.lerp, duration: this.options.duration, easing: this.options.easing } });
    });
    __publicField(this, "onNativeScroll", () => {
      if (!this.__preventNextScrollEvent && !this.isScrolling) {
        const t2 = this.animatedScroll;
        this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.direction = Math.sign(this.animatedScroll - t2), this.emit();
      }
    });
    window.lenisVersion = "1.0.33", t2 !== document.documentElement && t2 !== document.body || (t2 = window), this.options = { wrapper: t2, content: e, wheelEventsTarget: i, eventsTarget: s, smoothWheel: o, smoothTouch: n, syncTouch: r, syncTouchLerp: l, touchInertiaMultiplier: h, duration: a, easing: c, lerp: p, infinite: u, gestureOrientation: m, orientation: d, touchMultiplier: g, wheelMultiplier: v, normalizeWheel: S, autoResize: w }, this.animate = new Animate(), this.emitter = new Emitter(), this.dimensions = new Dimensions({ wrapper: t2, content: e, autoResize: w }), this.toggleClass("lenis", true), this.velocity = 0, this.isLocked = false, this.isStopped = false, this.isSmooth = r || o || n, this.isScrolling = false, this.targetScroll = this.animatedScroll = this.actualScroll, this.options.wrapper.addEventListener("scroll", this.onNativeScroll, { passive: false }), this.virtualScroll = new VirtualScroll(s, { touchMultiplier: g, wheelMultiplier: v, normalizeWheel: S }), this.virtualScroll.on("scroll", this.onVirtualScroll);
  }
  destroy() {
    this.emitter.destroy(), this.options.wrapper.removeEventListener("scroll", this.onNativeScroll, { passive: false }), this.virtualScroll.destroy(), this.dimensions.destroy(), this.toggleClass("lenis", false), this.toggleClass("lenis-smooth", false), this.toggleClass("lenis-scrolling", false), this.toggleClass("lenis-stopped", false), this.toggleClass("lenis-locked", false);
  }
  on(t2, e) {
    return this.emitter.on(t2, e);
  }
  off(t2, e) {
    return this.emitter.off(t2, e);
  }
  setScroll(t2) {
    this.isHorizontal ? this.rootElement.scrollLeft = t2 : this.rootElement.scrollTop = t2;
  }
  resize() {
    this.dimensions.resize();
  }
  emit() {
    this.emitter.emit("scroll", this);
  }
  reset() {
    this.isLocked = false, this.isScrolling = false, this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.animate.stop();
  }
  start() {
    this.isStopped = false, this.reset();
  }
  stop() {
    this.isStopped = true, this.animate.stop(), this.reset();
  }
  raf(t2) {
    const e = t2 - (this.time || t2);
    this.time = t2, this.animate.advance(1e-3 * e);
  }
  scrollTo(e, { offset: i = 0, immediate: s = false, lock: o = false, duration: n = this.options.duration, easing: r = this.options.easing, lerp: l = !n && this.options.lerp, onComplete: h = null, force: a = false, programmatic: c = true } = {}) {
    if (!this.isStopped && !this.isLocked || a) {
      if (["top", "left", "start"].includes(e))
        e = 0;
      else if (["bottom", "right", "end"].includes(e))
        e = this.limit;
      else {
        let t2;
        if ("string" == typeof e ? t2 = document.querySelector(e) : (e == null ? void 0 : e.nodeType) && (t2 = e), t2) {
          if (this.options.wrapper !== window) {
            const t3 = this.options.wrapper.getBoundingClientRect();
            i -= this.isHorizontal ? t3.left : t3.top;
          }
          const s2 = t2.getBoundingClientRect();
          e = (this.isHorizontal ? s2.left : s2.top) + this.animatedScroll;
        }
      }
      if ("number" == typeof e) {
        if (e += i, e = Math.round(e), this.options.infinite ? c && (this.targetScroll = this.animatedScroll = this.scroll) : e = t(0, e, this.limit), s)
          return this.animatedScroll = this.targetScroll = e, this.setScroll(this.scroll), this.reset(), void (h == null ? void 0 : h(this));
        if (!c) {
          if (e === this.targetScroll)
            return;
          this.targetScroll = e;
        }
        this.animate.fromTo(this.animatedScroll, e, { duration: n, easing: r, lerp: l, onStart: () => {
          o && (this.isLocked = true), this.isScrolling = true;
        }, onUpdate: (t2, e2) => {
          this.isScrolling = true, this.velocity = t2 - this.animatedScroll, this.direction = Math.sign(this.velocity), this.animatedScroll = t2, this.setScroll(this.scroll), c && (this.targetScroll = t2), e2 || this.emit(), e2 && (this.reset(), this.emit(), h == null ? void 0 : h(this), this.__preventNextScrollEvent = true, requestAnimationFrame(() => {
            delete this.__preventNextScrollEvent;
          }));
        } });
      }
    }
  }
  get rootElement() {
    return this.options.wrapper === window ? document.documentElement : this.options.wrapper;
  }
  get limit() {
    return this.dimensions.limit[this.isHorizontal ? "x" : "y"];
  }
  get isHorizontal() {
    return "horizontal" === this.options.orientation;
  }
  get actualScroll() {
    return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop;
  }
  get scroll() {
    return this.options.infinite ? (t2 = this.animatedScroll, e = this.limit, (t2 % e + e) % e) : this.animatedScroll;
    var t2, e;
  }
  get progress() {
    return 0 === this.limit ? 1 : this.scroll / this.limit;
  }
  get isSmooth() {
    return this.__isSmooth;
  }
  set isSmooth(t2) {
    this.__isSmooth !== t2 && (this.__isSmooth = t2, this.toggleClass("lenis-smooth", t2));
  }
  get isScrolling() {
    return this.__isScrolling;
  }
  set isScrolling(t2) {
    this.__isScrolling !== t2 && (this.__isScrolling = t2, this.toggleClass("lenis-scrolling", t2));
  }
  get isStopped() {
    return this.__isStopped;
  }
  set isStopped(t2) {
    this.__isStopped !== t2 && (this.__isStopped = t2, this.toggleClass("lenis-stopped", t2));
  }
  get isLocked() {
    return this.__isLocked;
  }
  set isLocked(t2) {
    this.__isLocked !== t2 && (this.__isLocked = t2, this.toggleClass("lenis-locked", t2));
  }
  get className() {
    let t2 = "lenis";
    return this.isStopped && (t2 += " lenis-stopped"), this.isLocked && (t2 += " lenis-locked"), this.isScrolling && (t2 += " lenis-scrolling"), this.isSmooth && (t2 += " lenis-smooth"), t2;
  }
  toggleClass(t2, e) {
    this.rootElement.classList.toggle(t2, e), this.emitter.emit("className change", this);
  }
};

// dep:@studio-freight_lenis
var studio_freight_lenis_default = Lenis;
export {
  studio_freight_lenis_default as default
};
//# sourceMappingURL=@studio-freight_lenis.js.map
